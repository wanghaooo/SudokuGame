{"version":3,"sources":["webpack:///webpack/bootstrap f858caf02f4973d7e075","webpack:///./js/index.js","webpack:///./js/core/tool.js","webpack:///./js/UI/grid.js","webpack:///./js/core/sudoku.js","webpack:///./js/core/generater.js","webpack:///./js/core/checker.js","webpack:///./js/UI/popupnumeber.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;ACtCA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,EAAC;AACD;AACA;AACA,EAAC;AACD;AACA;AACA,EAAC;;AAED;AACA;AACA,EAAC;;;;;;;;;;AC1BD;AACA;AACA;AACA;AACA;AACA,MAAK;;AAEL;AACA,4BAA2B,YAAY;AACvC,MAAK;;AAEL;AACA,wBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA,gBAAe,WAAW;AAC1B;AACA,wBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,gCAA+B,eAAe;AAC9C;AACA;AACA;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACnEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA,UAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mCAAkC,MAAM;AACxC,8CAA6C,UAAU;AACvD,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB,UAAS,0CAA0C;;AAEnD;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA,cAAa;AACb,UAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;AChHA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,E;;;;;;ACdA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,wBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;ACpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAmB,YAAY;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA2B,YAAY;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,+BAA8B,cAAc;AAC5C;AACA;AACA,mCAAkC,cAAc;AAChD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,+BAA8B,cAAc;AAC5C;AACA,mCAAkC,cAAc;AAChD;AACA;AACA;AACA,mCAAkC,wBAAwB;AAC1D;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,+BAA8B,cAAc;AAC5C;AACA;AACA,oCAAmC,eAAe;AAClD;AACA,4BAA2B,qBAAqB;AAChD;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACvFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA,cAAa;AACb;AACA;AACA,kBAAiB;AACjB;AACA,kB;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;;AAEA;AACA;AACA,gBAAe,YAAY;AAC3B;AACA,wBAAuB,KAAK;AAC5B,uBAAsB,IAAI;AAC1B,UAAS;AACT;;AAEA;AACA;AACA;AACA,E","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap f858caf02f4973d7e075","const toolKit = require(\"./core/tool\");\r\nconst Grid = require(\"./UI/grid\");\r\nconst PopupNumbers = require(\"./UI/popupnumeber\");\r\nconst popupNumbers = new PopupNumbers($(\"#popupNumbers\"));\r\n\r\n\r\nconst grid = new Grid($(\"#container\"));\r\ngrid.build();\r\ngrid.layout();\r\n\r\ngrid.bindPopup(popupNumbers);\r\n\r\n$(\"#check\").on(\"click\",e =>{\r\n    if(grid.check()){\r\n        alert(\"太厉害了，填写成功了！\")\r\n    }\r\n});\r\n$(\"#reset\").on(\"click\",e =>{\r\n    grid.reset();\r\n});\r\n$(\"#clear\").on(\"click\",e =>{\r\n    grid.clear();\r\n});\r\n\r\n$(\"#rebuild\").on(\"click\",e =>{\r\n    grid.rebuild();\r\n});\r\n\r\n\r\n\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./js/index.js\n// module id = 0\n// module chunks = 0","const MaxtoolKit = {\r\n    MaxRow(v = 0) {\r\n        const arry = new Array(9);\r\n        arry.fill(v);\r\n        return arry;\r\n    },\r\n\r\n    MakeMatrax(v = 0) {\r\n        return Array.from({ length: 9 }, () => this.MaxRow(v));\r\n    },\r\n\r\n    shuffle(array) {\r\n        for (var i = 0; i <= array.length - 2; i++) {\r\n            j = Math.floor(Math.random() * (array.length - i)) + i;\r\n            [array[i], array[j]] = [array[j], array[i]];\r\n        }\r\n        return array;\r\n    },\r\n    //检查是否可以填写\r\n    checkFillable(matrix, n, rowIndex, colIndex) {\r\n        const row = matrix[rowIndex];\r\n        const colum = this.MaxRow().map((v, index) => matrix[index][colIndex]);\r\n        const { boxIndex } = boxToolKit.convertToBoxIndex(rowIndex, colIndex);\r\n        const box = boxToolKit.getBoxCells(matrix, boxIndex);\r\n        for (let i = 0; i < 9; i++) {\r\n            if (row[i] === n || colum[i] === n || box[i] === n) {\r\n                return false\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n};\r\n\r\nconst boxToolKit = {\r\n    getBoxCells(matrix, boxIndex) {\r\n        const startRowIndex = Math.floor(boxIndex / 3) * 3;\r\n        const startColIndex = boxIndex % 3 * 3;\r\n        const result = [];\r\n        for (let cellIndex = 0; cellIndex < 9; cellIndex++) {\r\n            const rowIndex = startRowIndex + Math.floor(cellIndex / 3);\r\n            const colIndex = startColIndex + cellIndex % 3\r\n            result.push(matrix[rowIndex][colIndex]);\r\n        }\r\n        return result;\r\n    },\r\n\r\n    convertToBoxIndex(rowIndex, colIndex) {\r\n        return {\r\n            boxIndex: Math.floor(rowIndex / 3) * 3 + Math.floor(colIndex / 3),\r\n            cellIndex: rowIndex % 3 * 3 + colIndex % 3\r\n        }\r\n    },\r\n    converFromBoxIndex(boxIndex, cellIndex) {\r\n        return {\r\n            rowIndex: Math.floor(boxIndex / 3) * 3 + Math.floor(cellIndex / 3),\r\n            colIndex: boxIndex % 3 * 3 + cellIndex % 3\r\n        }\r\n    }\r\n}\r\n\r\nmodule.exports = class toolKit {\r\n    static get matrix() {\r\n        return MaxtoolKit;\r\n    }\r\n    static get box() {\r\n        return boxToolKit;\r\n    }\r\n};\r\n\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./js/core/tool.js\n// module id = 1\n// module chunks = 0","//生成九宫格\r\n//const Generator = require(\"../core/generater\");\r\nconst toolKit = require(\"../core/tool\");\r\nconst SudoKu = require(\"../core/sudoku\");\r\nconst Checker = require(\"../core/checker\");\r\n\r\nclass Grid {\r\n    constructor(container) {\r\n        this._$container = container;\r\n    }\r\n\r\n    build() {\r\n        //const generator = new Generator();\r\n        //generator.generate();\r\n        //const matrix = generator.matrix;\r\n        const sudoku = new SudoKu();\r\n        sudoku.make();\r\n        const matrix = sudoku.puzzleMatrix;\r\n        const rowClasses = [\"row_top\", \"row_middle\", \"row_bottom\"];\r\n        const colClasses = [\"col_left\", \"col_center\", \"col_right\"];\r\n\r\n        const $cells = matrix.map(rowValues => rowValues\r\n            .map((cellValue, colIndex) => {\r\n                return $(\"<span>\")\r\n                    .addClass(colClasses[colIndex % 3])\r\n                    .addClass(cellValue ? \"fixed\" : \"empty\")\r\n                    .text(cellValue);\r\n            }));\r\n\r\n        const $divArray = $cells.map(($spanArray, rowIndex) => {\r\n            return $(\"<div>\")\r\n                .addClass(\"row\")\r\n                .addClass(rowClasses[rowIndex % 3])\r\n                .append($spanArray);\r\n        });\r\n\r\n        this._$container.append($divArray);\r\n    }\r\n\r\n    layout() {\r\n        const width = $(\"span:first\").width();\r\n        $(\"span\")\r\n            .height(width)\r\n            .css({\r\n                \"line-height\": `${width}px`,\r\n                \"font-size\": width < 32 ? `${width / 2}px` : \"\"\r\n            });\r\n    }\r\n    //将点击页面中的$cell传入到popupNumbers.popup参数中\r\n    bindPopup(popupNumbers) {\r\n        this._$container.on(\"click\", \"span\", e => {\r\n            const $cell = $(e.target);\r\n            if ($cell.is(\".fixed\")) {\r\n                return;\r\n            }\r\n            popupNumbers.popup($cell);\r\n        })\r\n    }\r\n\r\n    check() {\r\n        //TODO数据从界面中获取\r\n        const $rows = this._$container.children();\r\n        //jQuery中map参数有区别与原生JS，第一个参数为Index，第二个才为vaulue\r\n        const data = $rows.map((rowIndex, div) => {\r\n            //div必须使用jQuery方法封装，否则只是DOM元素无法使用children方法获取子元素\r\n            return $(div).children()\r\n                .map((colIndex, span) => {\r\n                    return parseInt($(span).text() || 0);\r\n                })\r\n        }).toArray().map($data => $data.toArray());//此时出来的data数组不是原生JS数组而是jQuery对象数组，需要进行toArray方法转化\r\n\r\n        const checker = new Checker(data);\r\n\r\n        if (checker.check()) {\r\n            return true\r\n        }\r\n\r\n        //检查不成功，标记出错位置,利用checker.matrixMarks数组,通过each添加标记，jQuery中map与each区别在于前者返回一个新数组而each是在原有数组上修改\r\n        const marks = checker.matrixMarks;\r\n\r\n        this._$container.children().each((rowIndex, div) => {\r\n            $(div).children().each((colIndex, span) => {\r\n                const $span = $(span);\r\n                if ($span.is(\".fixed\") || marks[rowIndex][colIndex]) {\r\n                    $span.removeClass(\"error\");\r\n                } else {\r\n                    $(span).addClass(\"error\")\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    reset() {\r\n        this._$container.find(\"span:not(.fixed)\")\r\n            .removeClass(\"mark1 mark2 error\")\r\n            .addClass(\"empty\")\r\n            .text(0);\r\n    }\r\n\r\n    clear() {\r\n        this._$container.find(\"span.error\").removeClass(\"error mark1 mark2\")\r\n            .addClass(\"empty\")\r\n            .text(0);\r\n    }\r\n\r\n    rebuild() {\r\n        this._$container.empty();\r\n        this.build();\r\n        this.layout();\r\n    }\r\n}\r\n\r\nmodule.exports = Grid;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./js/UI/grid.js\n// module id = 2\n// module chunks = 0","//生成数独游戏\r\nconst Generator = require(\"./generater\");\r\n\r\nmodule.exports = class SudoKu {\r\n    constructor() {\r\n        //生成数独解决方案\r\n        const generator = new Generator();\r\n        generator.generate();\r\n        this.solutionMatrix = generator.matrix;\r\n    }\r\n    //生成谜盘\r\n    make(level = 5) {\r\n        this.puzzleMatrix = this.solutionMatrix.map(row => row.map(cell => Math.random() * 9 < level ? 0 : cell));\r\n    }\r\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./js/core/sudoku.js\n// module id = 3\n// module chunks = 0","//生成数独解决方法\r\nconst ToolKit = require(\"./tool\");\r\n\r\nmodule.exports = class Generator {\r\n    generate() {\r\n        while (!this.internalgenerator()) {\r\n\r\n        }\r\n    }\r\n\r\n    internalgenerator() {\r\n        this.matrix = ToolKit.matrix.MakeMatrax();\r\n        this.orders = ToolKit.matrix.MakeMatrax()\r\n            .map(row => row.map((v, index) => index))\r\n            .map(row => ToolKit.matrix.shuffle(row));\r\n        for (let n = 1; n <= 9; n++) {\r\n            if (!this.fillNumeber(n)) {\r\n                return false\r\n            }\r\n        }\r\n        return true\r\n    }\r\n    fillNumeber(n) {\r\n        return this.fillRow(n, 0);\r\n    }\r\n    fillRow(n, rowIndex) {\r\n        if (rowIndex > 8) {\r\n            return true;\r\n        }\r\n        const row = this.matrix[rowIndex];\r\n        const orders = this.orders[rowIndex];\r\n        for (let i = 0; i < 9; i++) {\r\n            const colIndex = orders[i];\r\n            //如果这个位置已经存在非0值\r\n            if (row[colIndex]) {\r\n                continue;\r\n            }\r\n            //检查这个位置是否可以填入n\r\n            if (!ToolKit.matrix.checkFillable(this.matrix, n, rowIndex, colIndex)) {\r\n                continue;\r\n            }\r\n            row[colIndex] = n;\r\n            //去下一行填写n,如果无法填入，继续寻找当前行的下一行\r\n            if (!this.fillRow(n, rowIndex + 1)) {\r\n                row[colIndex] = 0;\r\n                continue;\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n}\r\n\r\n\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./js/core/generater.js\n// module id = 4\n// module chunks = 0","//检查数独方案\r\nconst ToolKit = require(\"./tool\");\r\n//单个数组检查方法\r\nfunction checkArray(array) {\r\n    const length = array.length;\r\n    var marks = new Array(length);\r\n    marks.fill(true);\r\n    for (let i = 0; i < length; i++) {\r\n        if (!marks[i]) {\r\n            continue\r\n        }\r\n        const v = array[i];\r\n        if (!v) {\r\n            marks[i] = false;\r\n            continue;\r\n        };\r\n        for (let j = i + 1; j < length; j++) {\r\n            if (v === array[j]) {\r\n                marks[i] = marks[j] = false;\r\n            }\r\n        }\r\n    }\r\n    return marks;\r\n}\r\n\r\nmodule.exports = class Checker {\r\n    constructor(matrix) {\r\n        this._matrix = matrix;\r\n        this._matrixMarks = ToolKit.matrix.MakeMatrax(true);\r\n    }\r\n\r\n    get matrixMarks() {\r\n        return this._matrixMarks;\r\n    }\r\n\r\n    get isSuccess() {\r\n        return this._success;\r\n    }\r\n\r\n    check() {\r\n        this.checkRow();\r\n        this.checkCol();\r\n        this.checkBoxes();\r\n\r\n        this._success = this._matrixMarks.every(row => row.every(mark => mark));\r\n        return this._success;\r\n    }\r\n\r\n    checkRow() {\r\n        for (let rowIndex = 0; rowIndex < 9; rowIndex++) {\r\n            var row = this._matrix[rowIndex];\r\n            var markRow = checkArray(row);\r\n            for (let colIndex = 0; colIndex < 9; colIndex++) {\r\n                if (!markRow[colIndex]) {\r\n                    this._matrixMarks[rowIndex][colIndex] = false;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    checkCol() {\r\n        for (let colIndex = 0; colIndex < 9; colIndex++) {\r\n            let cols = [];\r\n            for (let rowIndex = 0; rowIndex < 9; rowIndex++) {\r\n                cols[rowIndex] = this._matrix[rowIndex][colIndex];\r\n            }\r\n            let colsMark = checkArray(cols);\r\n            for (let rowIndex = 0; rowIndex < cols.length; rowIndex++) {\r\n                if (!colsMark[rowIndex]) {\r\n                    this._matrixMarks[rowIndex][colIndex] = false\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    checkBoxes() {\r\n        for (let boxIndex = 0; boxIndex < 9; boxIndex++) {\r\n            const boxes = ToolKit.box.getBoxCells(this._matrix, boxIndex);\r\n            const Marks = checkArray(boxes);\r\n            for (let cellIndex = 0; cellIndex < 9; cellIndex++) {\r\n                if (!Marks[cellIndex]) {\r\n                    const { rowIndex, colIndex } = ToolKit.box.converFromBoxIndex(boxIndex, cellIndex)\r\n                    this._matrixMarks[rowIndex][colIndex] = false;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./js/core/checker.js\n// module id = 5\n// module chunks = 0","//弹出操作面板\r\nmodule.exports = class PopuNumbers {\r\n    constructor($panel) {\r\n        this._$panel = $panel.hide().removeClass(\"hidden\");\r\n        this._$panel.on(\"click\", \"span\", e => {\r\n            const $cell = this._$targetCell;\r\n            const $span = $(e.target);\r\n            if ($span.hasClass(\"mark1\")) {\r\n                if ($cell.hasClass(\"mark1\")) {\r\n                    $cell.removeClass(\"mark1\")\r\n                } else {\r\n                    $cell.removeClass(\"mark2\").addClass(\"mark1\");\r\n                }\r\n            } else if ($span.hasClass(\"mark2\")) {\r\n                if ($cell.hasClass(\"mark2\")) {\r\n                    $cell.removeClass(\"mark2\")\r\n                } else {\r\n                    $cell.removeClass(\"mark1\").addClass(\"mark2\");\r\n                }              \r\n            } else if ($span.hasClass(\"empty\")) {\r\n                $cell.text(0).addClass(\"empty\");\r\n            }\r\n            else {\r\n                $cell.removeClass(\"empty\").text($span.text());\r\n            }\r\n            this.hide();\r\n            return\r\n        })\r\n    }\r\n\r\n    popup($cell) {\r\n        this._$targetCell = $cell;\r\n        const { left, top } = $cell.position();\r\n        this._$panel.css({\r\n            \"left\": `${left}px`,\r\n            \"top\": `${top}px`\r\n        }).show();\r\n    }\r\n\r\n    hide() {\r\n        this._$panel.hide();\r\n    }\r\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./js/UI/popupnumeber.js\n// module id = 6\n// module chunks = 0"],"sourceRoot":""}